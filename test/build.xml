<project name="example" default="default"
 xmlns:if="ant:if"
 xmlns:unless="ant:unless"
>
  <!-- (c) Boundless -->
  <property name="build" value="${basedir}/build"/>
  <property name="themes" value="../themes"/>
  
  <target name="clean" description="cleans up build directory">
    <echo>Cleaning up ${build}...</echo>
    <delete dir="${build}"/>
  </target>

  <target name="init">
    <mkdir dir="${build}"/>
  </target>
  
  <target name="default" depends="boundless_rtd,slides"
          description="Build all themes for visual comparison."/>
  
  <target name="rtd" depends="init"
          description="Test html sphinx_rtd_theme (latested 0.43 release)">
    <echo>Building test for sphinx_rtd_theme...</echo>
    <antcall target="sphinx">
        <param name="tags" value="-t instructor"/>
        <param name="builder" value="html"/>
        <param name="theme" value="sphinx_rtd_theme"/>
        <param name="outdir" value="${build}/rtd/"/>
    </antcall>
    <antcall target="open">
        <param name="file" value="${build}/rtd/index.html"/>
    </antcall>
  </target>
  
  <target name="boundless_rtd" depends="init"
          description="Test html boundless_rtd (as used by LMS)">
    <echo>Building test for boundless_rtd ...</echo>
    <antcall target="sphinx">
        <param name="tags" value="-t instructor"/>
        <param name="builder" value="html"/>
        <param name="theme" value="boundless_rtd"/>
        <param name="outdir" value="${build}/html/"/>
    </antcall>
    <antcall target="open">
        <param name="file" value="${build}/html/index.html"/>
    </antcall>
  </target>
  
  <target name="learning" depends="init"
          description="Test workbook with learning_rtd_theme">
    <echo>Building instructor for learning_rtd_theme...</echo>
    <antcall target="sphinx">
        <param name="tags" value="-t instructor"/>
        <param name="builder" value="html"/>
        <param name="theme" value="learning_rtd_theme"/>
        <param name="outdir" value="${build}/workbook/"/>
    </antcall>
    <antcall target="open">
        <param name="file" value="${build}/workbook/index.html"/>
    </antcall>
  </target>

  <target name="slides" depends="init"
          description="Test slides using boundless_slides and bounldess_single themes">
    <echo>Building test for slides...</echo>
    <antcall target="sphinx">
        <param name="tags" value=""/>
        <param name="builder" value="slides"/>
        <param name="theme" value="boundless_slides"/>
        <param name="outdir" value="${build}/slides/"/>
    </antcall>
    <antcall target="open">
        <param name="file" value="${build}/slides/index.html"/>
    </antcall>
  </target>

  <target name="server" depends="init"
          description="Test html generation server_rtd_theme">
    <echo>Building test for server_rtd_theme...</echo>
    <antcall target="sphinx">
        <param name="tags" value=""/>
        <param name="builder" value="html"/>
        <param name="theme" value="server_rtd_theme"/>
        <param name="outdir" value="${build}/server/"/>
    </antcall>
    <antcall target="open">
        <param name="file" value="${build}/server/index.html"/>
    </antcall>
  </target>

  <!--                                                -->
  <!-- EXECUTABLES                                    -->
  <!--                                                -->
  <target name="pdf" depends="init" 
    description="Generate PDF (requires pdflatex installation)">
    <echo>Generate latex output from: ${basedir}/src</echo>
    <exec executable="sphinx-build" failonerror="true">
      <arg line="-D release='Not for distribution'"/>
      <arg line="-W"/>
      <arg line="-q"/>
      <arg line="-b latex"/>
      <arg line="-d ${build}/doctree"/>
      <arg path="${basedir}/src"/>
      <arg path="${build}/latex/"/>
    </exec>
    <echo>Shrinking PDF graphics on ${build}/latex/test.tex</echo>
    <!--
    <replace file="${build}/latex/${pdf}.tex"
         token="sphinxincludegraphics{" value="sphinxincludegraphics[scale=0.5]{"
    />-->
    <!-- run twice in a row to get TOC, and ignore errors -->
    <echo>Generate labels for ${pdf}.tex...</echo>
    <exec executable="pdflatex"
          dir="${build}/latex/"
          failonerror="false">
      <arg line="-interaction batchmode test.tex"/>
    </exec>
    <echo>Generate final ${pdf}.pdf...</echo>
    <exec executable="pdflatex"
          dir="${build}/latex/"
          failonerror="false">
      <arg line="-interaction batchmode test.tex"/>
    </exec>
    
    <antcall target="open">
        <param name="file" value="${build}/latex/test.pdf"/>
    </antcall>
  </target>
  


  <!-- sphinx-build -->  
  <target name="sphinx" depends="init">
    <echo>Building sphinx materials...</echo>
    <exec executable="sphinx-build" failonerror="true">
      <arg line="${tags}"/>
      <arg line="-W --keep-going "/>
      <arg line="-b ${builder}"/>
      <arg line="-Dhtml_theme=${theme}"/>
      <arg line="-A theme_coursename='Course Title'"/>
      <arg line="-Drst_epilog='.. |theme| replace:: ${theme}'"/>
      <arg line="-d ${build}/doctree"/>
      <arg path="${basedir}/src"/>
      <arg path="${outdir}"/>
    </exec>
    <!-- fix external links -->
    <echo>Clean up external links in ${outdir}</echo>
    <replace dir="${outdir}">
       <include name="**/*.html"/>
       <replacefilter token="class=&quot;reference external&quot;"
                      value="class=&quot;reference external&quot; target=&quot;_blank&quot;"/>
       <replacefilter token="class=&quot;reference download internal&quot;"
                      value="class=&quot;reference download internal&quot; target=&quot;_blank&quot;"/>
    </replace>
  </target>
  
  <!-- Used to display generated file at end of task -->
  <target name="open">
    <echo>File exists in ${file}</echo>
    
    <!-- mac -->
    <available file="/usr/bin/open" type="file"
          property="open.present"/>
    <exec executable="open" if:set="open.present">
       <arg line="${file}"/>
    </exec>
    
    <!-- linux -->
    <!--
    <available file="/usr/bin/xdg-open" type="file"
          property="xdg-open.present"/>
    <exec executable="xdg-open" if:set="xdg-open.present">
       <arg line="${file}"/>
    </exec>
    -->
    
    <!-- windows -->
    <condition property="cmd.present" value="true">
       <os family="windows" />
    </condition>
    <exec executable="cmd" if:set="cmd.present"
       spawn="yes">
        <arg value="/c" />
        <arg value="${file}" />
    </exec>
  </target>
  
</project>
